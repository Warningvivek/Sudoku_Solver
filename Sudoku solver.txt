class Solution {
public:
    bool isSafe(vector<vector<char>>& board, int row, int col, int number) {
        for (int i = 0; i < 9; i++) {
            if (board[i][col] == (char)(number + '0')) return false;
        }
        for (int j = 0; j < 9; j++) {
            if (board[row][j] == (char)(number + '0')) return false;
        }
        int sr = 3 * (row / 3);
        int sc = 3 * (col / 3);
        for (int i = sr; i < sr + 3; i++) {
            for (int j = sc; j < sc + 3; j++) {
                if (board[i][j] == (char)(number + '0')) return false;
            }
        }
        return true;
    }

    bool helper(vector<vector<char>>& board, int row, int col) {
        if (row == 9) return true;
        int nrow, ncol;
        if (col == 8) {
            nrow = row + 1;
            ncol = 0;
        } else {
            nrow = row;
            ncol = col + 1;
        }
        if (board[row][col] != '.') {
            return helper(board, nrow, ncol);
        } else {
            for (int i = 1; i <= 9; i++) {
                if (isSafe(board, row, col, i)) {
                    board[row][col] = (char)(i + '0');
                    if (helper(board, nrow, ncol)) return true;
                    board[row][col] = '.';
                }
            }
        }
        return false;
    }

    void solveSudoku(vector<vector<char>>& board) {
        helper(board, 0, 0);
    }
};
